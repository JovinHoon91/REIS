package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class final_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("\n");
      out.write(" \n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("     <head>\n");
      out.write("\n");
      out.write("        <title>Leaflet Test</title>\n");
      out.write("        \n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"Css/LeafletStyleSheet.css\" type=\"text/css\" /> ");
      out.write(" \n");
      out.write("        <link rel=\"stylesheet\" href=\"Css/leaflet-panel-layers.css\" type=\"text/css\" /> ");
      out.write(" \n");
      out.write("        <link rel=\"stylesheet\" href=\"Css/leaflet.css\" type=\"text/css\" /> ");
      out.write("\n");
      out.write("        <link rel=\"stylesheet\" href=\"Css/L.Control.Opencagesearch.css\" />");
      out.write("\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        <script src=\"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\"></script> ");
      out.write("\n");
      out.write("        \n");
      out.write("        <script src=\"http://maps.google.com/maps/api/js?v=3&sensor=false\"></script>");
      out.write("\n");
      out.write("        <script src=\"Maps/leaflet.js\"></script>");
      out.write("\n");
      out.write("        <script src=\"Maps/leaflet-src.js\"></script>");
      out.write("\n");
      out.write("        <script src=\"Maps/Googlemap.js\"></script>");
      out.write("\n");
      out.write("        <script src=\"Maps/bing.js\"></script> ");
      out.write("\n");
      out.write("        \n");
      out.write("        <script src=\"UIlibraries/L.Control.Sidebar.js\"></script> ");
      out.write("\n");
      out.write("        <script src=\"UIlibraries/leaflet-panel-layers.js\"></script> ");
      out.write("\n");
      out.write("        <script src=\"UIlibraries/PruneCluster.js\"></script> ");
      out.write("\n");
      out.write("        <script src=\"UIlibraries/L.Control.Opencagesearch.js\"></script> ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("        <style>\n");
      out.write("            #map { \n");
      out.write("                height: 500px; \n");
      out.write("                width: 900px;\n");
      out.write("            }\n");
      out.write("        </style>\n");
      out.write("\n");
      out.write("    </head>\n");
      out.write("\n");
      out.write("    <body>\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Interactive UI/dateSlider.jsp", out, false);
      out.write(" <br/> ");
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Interactive UI/priceslider.jsp", out, false);
      out.write(' ');
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Interactive UI/sidebar.jsp", out, false);
      out.write(' ');
      out.write("\n");
      out.write("        \n");
      out.write("        <div id=\"map\"></div>\n");
      out.write("\n");
      out.write("        \n");
      out.write("        <script>\n");
      out.write("        \n");
      out.write("        var map = L.map('map').setView([1.3667, 103.8], 11);//create map\n");
      out.write("        \n");
      out.write("        //create options for opencagemaps:Max 1500 hits per day\n");
      out.write("        var options = {\n");
      out.write("            key: 'b7212e1e14c705bf72473f2cfeaf85c1',//API Key gotten by signing up with open cage\n");
      out.write("            limit: 10\n");
      out.write("        };\n");
      out.write("        \n");
      out.write("        //Add opencage control to the map\n");
      out.write("        var control = L.Control.openCageSearch(options).addTo(map);\n");
      out.write("        \n");
      out.write("        //Create map layer using openstreet\n");
      out.write("        var mainlayer=L.tileLayer('http://{s}.tiles.mapbox.com/v3/realis.jo4acied/{z}/{x}/{y}.png', {\n");
      out.write("            attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery Â© <a href=\"http://mapbox.com\">Mapbox</a>',\n");
      out.write("            maxZoom: 18\n");
      out.write("        }).addTo(map); \n");
      out.write("        \n");
      out.write("        //Create map layer using googlemap terrain\n");
      out.write("        var gterrain = new L.Google('TERRAIN');\n");
      out.write("        \n");
      out.write("        //Create map layer using googlemap satellite\n");
      out.write("        var gsatellite = new L.Google('SATELLITE');\n");
      out.write("        \n");
      out.write("        //Create map layer using googlemap road map\n");
      out.write("        var groadmap = new L.Google('ROADMAP');\n");
      out.write("        \n");
      out.write("        //Create map layer using Bing\n");
      out.write("        //var bing = new L.BingLayer(\"Anqm0F_JjIZvT0P3abS6KONpaBaKuTnITRrnYuiJCE0WOhH6ZbE4DzeT6brvKVR5\");\n");
      out.write("            \n");
      out.write("        //add sidebar to the map\n");
      out.write("        var sidebar = L.control.sidebar('sidebar', {\n");
      out.write("             position: 'left'\n");
      out.write("            }); \n");
      out.write("       \n");
      out.write("       //adds the control to map\n");
      out.write("       map.addControl(sidebar);\n");
      out.write("       \n");
      out.write("        //mainlayer.setOpacity(0.6);\n");
      out.write("        \n");
      out.write("       var layer=L.geoJson(geojsonFeature, {\n");
      out.write("        \n");
      out.write("                onEachFeature: onEachFeature\n");
      out.write("        \n");
      out.write("                }).addTo(map); \n");
      out.write("    \n");
      out.write("       \n");
      out.write("    // A function to put popups in each data point added by the layer\n");
      out.write("    function onEachFeature(feature, layer) {\n");
      out.write("        if (feature.properties && feature.properties.popupContent) {\n");
      out.write("            layer.bindPopup(feature.properties.popupContent);\n");
      out.write("            \n");
      out.write("        }\n");
      out.write("\n");
      out.write("    }\n");
      out.write("      \n");
      out.write("      //hardcoded data\n");
      out.write("        var geojsonFeature = [\n");
      out.write("        {\n");
      out.write("            \"type\": \"Feature\",\n");
      out.write("            \"properties\": {\n");
      out.write("                \"project_name\": \"VILLA AZURA\",\n");
      out.write("                \"property_type\": \"Executive Condominium\",\n");
      out.write("                \"sale_type\": \"Resale\",\n");
      out.write("                \"unit_price\": 1200,\n");
      out.write("                \"popupContent\": \"First Transaction\"\n");
      out.write("            },\n");
      out.write("            \"geometry\": {\n");
      out.write("                \"type\": \"Point\",\n");
      out.write("                \"coordinates\": [1.3667, 103.8]\n");
      out.write("            }\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            \"type\": \"Feature\",\n");
      out.write("            \"properties\": {\n");
      out.write("                \"project_name\": \"THE SKYWOODS\",\n");
      out.write("                \"property_type\": \"Terrace House\",\n");
      out.write("                \"sale_type\": \"New Sale\",\n");
      out.write("                \"unit_price\": 1400,\n");
      out.write("                \"popupContent\": \"Second Transaction\"\n");
      out.write("            },\n");
      out.write("            \"geometry\": {\n");
      out.write("                \"type\": \"Point\",\n");
      out.write("                \"coordinates\": [1.2826, 103.8584]\n");
      out.write("            }\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            \"type\": \"Feature\",\n");
      out.write("            \"properties\": {\n");
      out.write("                \"project_name\": \"VILLA AZURA\",\n");
      out.write("                \"property_type\": \"Condominium\",\n");
      out.write("                \"sale_type\": \"Subsale\",\n");
      out.write("                \"unit_price\": 2009,\n");
      out.write("                \"popupContent\": \"First Transaction\"\n");
      out.write("            },\n");
      out.write("            \"geometry\": {\n");
      out.write("                \"type\": \"Point\",\n");
      out.write("                \"coordinates\": [1.38946,103.83041]\n");
      out.write("            }\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            \"type\": \"Feature\",\n");
      out.write("            \"properties\": {\n");
      out.write("                \"project_name\": \"VILLA AZURA\",\n");
      out.write("                \"property_type\": \"Condominium\",\n");
      out.write("                \"sale_type\": \"Subsale\",\n");
      out.write("                \"unit_price\": 2009,\n");
      out.write("                \"popupContent\": \"First Transaction\"\n");
      out.write("            },\n");
      out.write("            \"geometry\": {\n");
      out.write("                \"type\": \"Point\",\n");
      out.write("                \"coordinates\": [1.38946,103.83041]\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("    ];\n");
      out.write("\n");
      out.write("    //set the images for the icon in the respective filters\n");
      out.write("    var execcondoIcon=L.icon({iconUrl: 'Icons/Execcondo.png',iconSize:[20, 20]});\n");
      out.write("    var condoIcon=L.icon({iconUrl: 'Icons/Condominium.png',iconSize:[15, 15]});\n");
      out.write("    var detachedIcon=L.icon({iconUrl: 'Icons/Detached House.png',iconSize:[20, 20]});\n");
      out.write("    var apartmentIcon=L.icon({iconUrl: 'Icons/Apartment.png',iconSize:[20, 20]});\n");
      out.write("    var semidIcon=L.icon({iconUrl: 'Icons/Semid.jpg',iconSize:[20, 20]}); \n");
      out.write("    var terraceIcon=L.icon({iconUrl: 'Icons/Terrace.png',iconSize:[20, 20]});\n");
      out.write("    var priceIcon=L.icon({iconUrl: 'Icons/PriceMarker.png',iconSize:[40, 30],iconAnchor: [18, 31]});\n");
      out.write("    \n");
      out.write("    //Creating layers of filters to put markers on.These layers have the ability to cluster\n");
      out.write("    var allCluster = new PruneClusterForLeaflet();\n");
      out.write("    \n");
      out.write("    //These layers are for sale types\n");
      out.write("    var resaleCluster = new PruneClusterForLeaflet();\n");
      out.write("    var subsaleCluster = new PruneClusterForLeaflet();\n");
      out.write("    var newsaleCluster = new PruneClusterForLeaflet();\n");
      out.write("    \n");
      out.write("    //These layers are for property types\n");
      out.write("    var execcondoCluster = new PruneClusterForLeaflet();\n");
      out.write("    var condoCluster = new PruneClusterForLeaflet(); \n");
      out.write("    var apartmentCluster = new PruneClusterForLeaflet();\n");
      out.write("    var terraceCluster = new PruneClusterForLeaflet();\n");
      out.write("    var semidCluster = new PruneClusterForLeaflet();\n");
      out.write("    var detachedCluster = new PruneClusterForLeaflet();\n");
      out.write("    \n");
      out.write("    //These layers are for the sliders\n");
      out.write("    var priceCluster= new PruneClusterForLeaflet();\n");
      out.write("    var dateCluster= new PruneClusterForLeaflet();\n");
      out.write("    \n");
      out.write("   \n");
      out.write("        // A big loop to put the respective features into layers for the filtering of markers.\n");
      out.write("      for(var i=0;i<geojsonFeature.length;i++){\n");
      out.write("                \n");
      out.write("        var geojson=geojsonFeature[i];  \n");
      out.write("        \n");
      out.write("        var allclustmarker=new PruneCluster.Marker(geojson.geometry.coordinates[0].toString(),geojson.geometry.coordinates[1].toString());\n");
      out.write("        allclustmarker.data.popup=(\"Name: \"+geojson.properties.project_name+ \"<br> Location: \"+geojson.properties.property_type+\"<br> Price:\"+geojson.properties.sale_type);\n");
      out.write("        allCluster.RegisterMarker(allclustmarker);\n");
      out.write("        //map.addLayer(allCluster);\n");
      out.write("        \n");
      out.write("        if(geojson.properties.sale_type==\"Resale\"){\n");
      out.write("            var resaleclustmarker=new PruneCluster.Marker(geojson.geometry.coordinates[0].toString(),geojson.geometry.coordinates[1].toString());\n");
      out.write("            resaleclustmarker.data.popup=(\"Name: \"+geojson.properties.project_name+ \"<br> Location: \"+geojson.properties.property_type+\"<br> Price:\"+geojson.properties.sale_type);\n");
      out.write("            resaleCluster.RegisterMarker(resaleclustmarker);\n");
      out.write("            \n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        if(geojson.properties.sale_type==\"Subsale\"){\n");
      out.write("            var subsaleclustmarker=new PruneCluster.Marker(geojson.geometry.coordinates[0].toString(),geojson.geometry.coordinates[1].toString());\n");
      out.write("            subsaleclustmarker.data.popup=(\"Name: \"+geojson.properties.project_name+ \"<br> Location: \"+geojson.properties.property_type+\"<br> Price:\"+geojson.properties.sale_type);\n");
      out.write("            subsaleCluster.RegisterMarker(subsaleclustmarker);\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        if(geojson.properties.sale_type==\"New Sale\"){\n");
      out.write("            var newsaleclustmarker=new PruneCluster.Marker(geojson.geometry.coordinates[0].toString(),geojson.geometry.coordinates[1].toString());\n");
      out.write("            newsaleclustmarker.data.popup=(\"Name: \"+geojson.properties.project_name+ \"<br> Location: \"+geojson.properties.property_type+\"<br> Price:\"+geojson.properties.sale_type);\n");
      out.write("            newsaleCluster.RegisterMarker(newsaleclustmarker); \n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        if(geojson.properties.property_type==\"Executive Condominium\"){\n");
      out.write("            var execcondoclustmarker=new PruneCluster.Marker(geojson.geometry.coordinates[0].toString(),geojson.geometry.coordinates[1].toString());\n");
      out.write("            execcondoclustmarker.data.icon=execcondoIcon;\n");
      out.write("            execcondoclustmarker.data.popup=(\"Name: \"+geojson.properties.project_name+ \"<br> Location: \"+geojson.properties.property_type+\"<br> Price:\"+geojson.properties.sale_type);\n");
      out.write("            execcondoCluster.RegisterMarker(execcondoclustmarker);\n");
      out.write("            \n");
      out.write("            \n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        if(geojson.properties.property_type==\"Condominium\"){\n");
      out.write("            var condoclustmarker=new PruneCluster.Marker(geojson.geometry.coordinates[0].toString(),geojson.geometry.coordinates[1].toString());\n");
      out.write("            condoclustmarker.data.icon=condoIcon;\n");
      out.write("            condoclustmarker.data.popup=(\"Name: \"+geojson.properties.project_name+ \"<br> Location: \"+geojson.properties.property_type+\"<br> Price:\"+geojson.properties.sale_type);\n");
      out.write("            condoCluster.RegisterMarker(condoclustmarker);\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        if(geojson.properties.property_type==\"Apartment\"){\n");
      out.write("            var apartmentclustmarker=new PruneCluster.Marker(geojson.geometry.coordinates[0].toString(),geojson.geometry.coordinates[1].toString());\n");
      out.write("            apartmentclustmarker.data.icon=apartmentIcon;\n");
      out.write("            apartmentclustmarker.data.popup=(\"Name: \"+geojson.properties.project_name+ \"<br> Location: \"+geojson.properties.property_type+\"<br> Price:\"+geojson.properties.sale_type);\n");
      out.write("            apartmentCluster.RegisterMarker(apartmentclustmarker);\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        if(geojson.properties.property_type==\"Terrace House\"){\n");
      out.write("            var terraceclustmarker=new PruneCluster.Marker(geojson.geometry.coordinates[0].toString(),geojson.geometry.coordinates[1].toString());\n");
      out.write("            terraceclustmarker.data.icon=terraceIcon;\n");
      out.write("            terraceclustmarker.data.popup=(\"Name: \"+geojson.properties.project_name+ \"<br> Location: \"+geojson.properties.property_type+\"<br> Price:\"+geojson.properties.sale_type);\n");
      out.write("            terraceCluster.RegisterMarker(terraceclustmarker);\n");
      out.write("        }    \n");
      out.write("        \n");
      out.write("        if(geojson.properties.property_type==\"Semi-Detached House\"){\n");
      out.write("            var semidclustmarker=new PruneCluster.Marker(geojson.geometry.coordinates[0].toString(),geojson.geometry.coordinates[1].toString());\n");
      out.write("            semidclustmarker.data.icon=semidIcon;\n");
      out.write("            semidclustmarker.data.popup=(\"Name: \"+geojson.properties.project_name+ \"<br> Location: \"+geojson.properties.property_type+\"<br> Price:\"+geojson.properties.sale_type);\n");
      out.write("            semidCluster.RegisterMarker(semidclustmarker);\n");
      out.write("        }   \n");
      out.write("        \n");
      out.write("        if(geojson.properties.property_type==\"Detached House\"){\n");
      out.write("            var detachedclustmarker=new PruneCluster.Marker(geojson.geometry.coordinates[0].toString(),geojson.geometry.coordinates[1].toString());\n");
      out.write("            detachedclustmarker.data.icon=detachedIcon;\n");
      out.write("            detachedclustmarker.data.popup=(\"Name: \"+geojson.properties.project_name+ \"<br> Location: \"+geojson.properties.property_type+\"<br> Price:\"+geojson.properties.sale_type);\n");
      out.write("            detachedCluster.RegisterMarker(detachedclustmarker);\n");
      out.write("        }    \n");
      out.write("      }\n");
      out.write("      \n");
      out.write("      \n");
      out.write("      var baselayers = [\n");
      out.write("        {\n");
      out.write("            name:\"<font color='black'>Base Layers\",\n");
      out.write("            sep:true\n");
      out.write("        },  \n");
      out.write("        {\n");
      out.write("            name:\"<font color='black'>Open Street Map\",\n");
      out.write("            layer: mainlayer\n");
      out.write("        },\n");
      out.write("       //{\n");
      out.write("        //    name:\"<font color='black'>Google Terrain\",\n");
      out.write("        //    layer: gterrain\n");
      out.write("        //},\n");
      out.write("        {\n");
      out.write("            name:\"<font color='black'>Google Road Map\",\n");
      out.write("            layer: groadmap\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            name:\"<font color='black'>Google Satellite\",\n");
      out.write("            layer: gsatellite\n");
      out.write("        }\n");
      out.write("      ];\n");
      out.write("      \n");
      out.write("      \n");
      out.write("      //Creates an overlay with an interface for checkboxes\n");
      out.write("      var overlayall = [\n");
      out.write("        {\n");
      out.write("            name:\"<font color='black'>Sale Type\",\n");
      out.write("            sep:true\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            name:\"<font color='blue'>Resales\",\n");
      out.write("            layer: resaleCluster\n");
      out.write("        },\n");
      out.write("\n");
      out.write("        {\n");
      out.write("            name:\"<font color='red'>Sub Sales\",\n");
      out.write("            layer: subsaleCluster\n");
      out.write("        },\n");
      out.write("\n");
      out.write("        {\n");
      out.write("            name:\"New Sales\",\n");
      out.write("            layer: newsaleCluster\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            name:\"<font color='black'>Property Type\",\n");
      out.write("            sep:true\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            name:\"<img src='Icons/Execcondo.png' height=20> Executive Condominium\",\n");
      out.write("            layer: execcondoCluster\n");
      out.write("        },\n");
      out.write("\n");
      out.write("        {\n");
      out.write("            name:\"<img src='Icons/Condominium.png' height=20> Condominium\",\n");
      out.write("            layer: condoCluster\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            name:\"<img src='Icons/Apartment.png' height=20> Apartment\",\n");
      out.write("            layer: apartmentCluster\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            name:\"<img src='Icons/Terrace.png' height=20> Terrace House\",\n");
      out.write("            layer: terraceCluster\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            name:\"<img src='Icons/Semid.jpg' height=20> Semi-Detached House\",\n");
      out.write("            layer: semidCluster\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            name:\"<img src='Icons/Detached House.png' height=20> Detached House\",\n");
      out.write("            layer: detachedCluster\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            name:\"<font color='black'>Show All\",\n");
      out.write("            sep:true\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            name:\"<img src='Icons/defaultmarker.png' height=20> All\",\n");
      out.write("            layer: allCluster\n");
      out.write("        }];\n");
      out.write("\n");
      out.write("        //Assigning control to overlays, create checkboxes and added to map   \n");
      out.write("        map.addControl( new L.Control.PanelLayers(baselayers, overlayall, {collapsed: false}) );\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        var prices=L.layerGroup([]);\n");
      out.write("        //Price slider logic\n");
      out.write("        $(\"#slider\").on(\"valuesChanged\", function(e, data){\n");
      out.write("            map.removeLayer(prices);\n");
      out.write("            prices=L.layerGroup([]);\n");
      out.write("            for(var i=0;i<geojsonFeature.length;i++){\n");
      out.write("             var geojsonprice=geojsonFeature[i];\n");
      out.write("               if(Number(geojsonprice.properties.unit_price)>=data.values.min && Number(geojsonprice.properties.unit_price)<=data.values.max){\n");
      out.write("                    var price=L.marker(geojsonprice.geometry.coordinates,{icon:priceIcon});\n");
      out.write("                    prices.addLayer(price);\n");
      out.write("                }    \n");
      out.write("            }\n");
      out.write("            prices.addTo(map);\n");
      out.write("      });\n");
      out.write("      \n");
      out.write("      var dates=L.layerGroup([]);\n");
      out.write("      //Date slider logic\n");
      out.write("      $(\"#dateslider\").on(\"valuesChanged\", function(e, data){\n");
      out.write("            map.removeLayer(dates);\n");
      out.write("            dates=L.layerGroup([]);\n");
      out.write("            for(var i=0;i<geojsonFeature.length;i++){\n");
      out.write("             var geojsondate=geojsonFeature[i];\n");
      out.write("               if(Number(geojsondate.properties.date)>=Number(data.values.min) && Number(geojsondate.properties.date)<=Number(data.values.max)){\n");
      out.write("                    var date=L.marker(geojsondate.geometry.coordinates);\n");
      out.write("                    dates.addLayer(date);\n");
      out.write("                }    \n");
      out.write("            }\n");
      out.write("            dates.addTo(map);\n");
      out.write("      });\n");
      out.write("        \n");
      out.write("        </script>\n");
      out.write("        \n");
      out.write("    </body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
